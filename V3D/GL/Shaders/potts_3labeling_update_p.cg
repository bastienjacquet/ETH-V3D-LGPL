//#define USE_PACKED_P 1

#if defined(USE_PACKED_P)

void unpack_p(float3 p_packed, out half3 p1, out half3 p2)
{
   p1.xy = unpack_2half(p_packed.x);
   half2 tmp = unpack_2half(p_packed.y);
   p1.z = tmp.x;
   p2.x = tmp.y;
   p2.yz = unpack_2half(p_packed.z);
}

float3 pack_p(half3 p1, half3 p2)
{
   float3 res = float3(0);
   res.x = pack_2half(p1.xy);
   res.y = pack_2half(half2(p1.z, p2.x));
   res.z = pack_2half(p2.yz);
   return res;
}

float3 rcp_tv(float3 u_x, float3 u_y)
{
   float3 r2 = max(float3(1), u_x*u_x + u_y*u_y);
   return rsqrt(r2);
}

void main(uniform sampler2D u_src : TEXUNIT0,
          uniform sampler2D p_src : TEXUNIT1,
          float2 st0  : TEXCOORD0,
          float4 stWE : TEXCOORD1,
          float4 stNS : TEXCOORD2,
          uniform float timestep_over_theta,
          out float3 p_out : COLOR0)
{
   float3 const u = tex2D(u_src, st0).xyz;
   float3 const u_E = tex2D(u_src, stWE.zw).xyz;
   float3 const u_S = tex2D(u_src, stNS.zw).xyz;

   float3 p_packed = tex2D(p_src, st0).xyz;

   half3 p1, p2;

   unpack_p(p_packed, p1, p2);

   float3 u_x = u_E - u;
   float3 u_y = u_S - u;

   p1 = p1 + timestep_over_theta * u_x;
   p2 = p2 + timestep_over_theta * u_y;
#if 0
   // Euclidean norm
   float3 denom = rcp_tv(p1, p2);
   p1 *= denom;
   p2 *= denom;
#else
   // L_1 norm (on the gradient of u)
   p1 = clamp(p1, -1, 1);
   p2 = clamp(p2, -1, 1);
#endif

   p_out = pack_p(p1, p2);
}

#else

void main(uniform sampler2D u_src : TEXUNIT0,
          uniform sampler2D p1_src : TEXUNIT1,
          uniform sampler2D p2_src : TEXUNIT2,
          float2 st0  : TEXCOORD0,
          float4 stWE : TEXCOORD1,
          float4 stNS : TEXCOORD2,
          uniform float timestep_over_theta,
          uniform float epsilon,
          out half3 p1_out : COLOR0,
          out half3 p2_out : COLOR1)
{
   float3 const u   = tex2D(u_src, st0).xyz;
   float3 const u_E = tex2D(u_src, stWE.zw).xyz;
   float3 const u_S = tex2D(u_src, stNS.zw).xyz;

   half3 p1 = tex2D(p1_src, st0).xyz;
   half3 p2 = tex2D(p2_src, st0).xyz;

   float3 u_x = u_E - u;
   float3 u_y = u_S - u;

   p1 += timestep_over_theta * (u_x - epsilon*p1);
   p2 += timestep_over_theta * (u_y - epsilon*p2);

# if 0
   p1_out = p1 / max(float3(1), abs(p1));
   p2_out = p2 / max(float3(1), abs(p2));
# else
   p1_out = clamp(p1, -1, 1);
   p2_out = clamp(p2, -1, 1);
# endif
}

#endif
