float3 thresholdingStep(float3 a2, float3 b, float lambda_theta)
{
   float3 lam_a2 = lambda_theta * a2;
   return (b + lam_a2 < 0) ? lambda_theta : ((b - lam_a2 > 0) ? -lambda_theta : (-b/a2));
}

void main(uniform sampler2D uv_src       : TEXUNIT0, // (u, v)
          uniform sampler2D p_uv_src     : TEXUNIT1, // (p1_u, p1_v, p2_u, p2_v)
          uniform sampler2D warped_R_tex : TEXUNIT2, // (c, Ix, Iy)
          uniform sampler2D warped_G_tex : TEXUNIT3, // (c, Ix, Iy)
          uniform sampler2D warped_B_tex : TEXUNIT4, // (c, Ix, Iy)
                  float2 st0  : TEXCOORD0,
                  float4 stEW : TEXCOORD1,
                  float4 stSN : TEXCOORD2,
          uniform float lambda_theta,
          uniform float theta,
              out float2 uv_out : COLOR0)
{
   float3 warped_R = tex2D(warped_R_tex, st0).xyz;
   float3 warped_G = tex2D(warped_G_tex, st0).xyz;
   float3 warped_B = tex2D(warped_B_tex, st0).xyz;

   // Normalize here to allow lower precision for the warped buffer
   warped_R /= 255;
   warped_G /= 255;
   warped_B /= 255;

   float2 stW = stEW.zw;
   float2 stN = stSN.zw;

   bool const isLeftBorder   = (stW.x < 0);
   bool const isRightBorder  = (stEW.x > 1);
   bool const isTopBorder    = (stN.y < 0);
   bool const isBottomBorder = (stSN.y > 1);

   float2 uv = tex2D(uv_src, st0).xy;

   float4 p_uv    = tex2D(p_uv_src, st0);
   float2 p1_W_uv = tex2D(p_uv_src, stW).xy;
   float2 p2_N_uv = tex2D(p_uv_src, stN).zw;

   p1_W_uv = isLeftBorder   ? float2(0) : p1_W_uv;
   p2_N_uv = isTopBorder    ? float2(0) : p2_N_uv;
   p_uv.xy = isRightBorder  ? float2(0) : p_uv.xy;
   p_uv.zw = isBottomBorder ? float2(0) : p_uv.zw;

   float2 div_p = p_uv.xy - p1_W_uv + p_uv.zw - p2_N_uv;

   // new u and v
   float3 b = float3(0);
   b.x = dot(warped_R, float3(1, uv));
   b.y = dot(warped_G, float3(1, uv));
   b.z = dot(warped_B, float3(1, uv));

   float3 r2 = float3(0);
   r2.x = dot(warped_R.yz, warped_R.yz);
   r2.y = dot(warped_G.yz, warped_G.yz);
   r2.z = dot(warped_B.yz, warped_B.yz);

   float3 step = thresholdingStep(r2, b, lambda_theta);

   float2 UV = float2(0);
   UV.x += dot(step, float3(warped_R.y, warped_G.y, warped_B.y));
   UV.y += dot(step, float3(warped_R.z, warped_G.z, warped_B.z));
   UV /= 3.0;
   UV += uv;
   uv_out.xy = UV + theta * div_p;
}
