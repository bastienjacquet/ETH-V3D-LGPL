float4 rcp_tv(float4 u_x, float4 u_y)
{
   float4 r2 = max(float4(1), u_x*u_x + u_y*u_y);
   return rsqrt(r2);
}

void main(uniform sampler2D u_src : TEXUNIT0,
          uniform sampler2D p1_src : TEXUNIT1,
          uniform sampler2D p2_src : TEXUNIT2,
          uniform sampler2D q_src : TEXUNIT3,
          uniform sampler2D c_src : TEXUNIT4,
          float2 st0  : TEXCOORD0,
          float4 stWE : TEXCOORD1,
          float4 stNS : TEXCOORD2,
          uniform float tau,
          out float4 p1_out : COLOR0,
          out float4 p2_out : COLOR1,
          out float4 q_out : COLOR2)
{
   float4 const c   = tex2D(c_src, st0);
   float4 const u   = tex2D(u_src, st0);
   float4 const u_E = tex2D(u_src, stWE.zw);
   float4 const u_S = tex2D(u_src, stNS.zw);

   float4 p1 = tex2D(p1_src, st0);
   float4 p2 = tex2D(p2_src, st0);
   float4 q  = tex2D(q_src, st0);

   float4 const u_l = float4(u.yzw, 1.0) - u;
   float4 const u_E_l = float4(u_E.yzw, 1.0) - u_E;
   float4 const u_S_l = float4(u_S.yzw, 1.0) - u_S;

   float4 u_l_x = u_E_l - u_l;
   float4 u_l_y = u_S_l - u_l;

   p1 -= tau * u_l_x;
   p2 -= tau * u_l_y;
   q  -= tau * u_l;

#if 0
   p1_out = clamp(p1, -1, 1);
   p2_out = clamp(p2, -1, 1);
#else
   float4 denom = min(float4(1.0), rcp_tv(p1, p2));
   p1_out = p1 * denom;
   p2_out = p2 * denom;
#endif
   q_out  = clamp(q, -c, c);
}
