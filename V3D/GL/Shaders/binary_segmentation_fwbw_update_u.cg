float sgn(float x) { return (x >= 0.0f) ? 1.0f : -1.0f; }
float4 sgn(float4 x) { return (x >= float4(0.0f)) ? float4(1.0f) : float4(-1.0f); }

float huberDeriv(float x, float eps, float rcpEps)
{
   return (abs(x) >= eps) ? sgn(x) : (x * rcpEps);
}

float4 huberDeriv(float u, float4 ux, float eps, float rcpEps)
{
   return (abs(u - ux) >= float4(eps)) ? sgn(u - ux) : ((u - ux) * rcpEps);
}

void main(uniform sampler2D u_src : TEXUNIT0,
          uniform sampler2D weights_src : TEXUNIT1,
          uniform sampler2D c_src : TEXUNIT2,
          float2 st0  : TEXCOORD0,
          float4 stWE : TEXCOORD1,
          float4 stNS : TEXCOORD2,
          uniform float tau,
          uniform float2 epsilon, // epsilon and 1/epsilon
          out float u_out : COLOR0)
{
   float2 stW = stWE.xy;
   float2 stN = stNS.xy;
   float2 stE = stWE.zw;
   float2 stS = stNS.zw;

   float const u   = tex2D(u_src, st0).x;
   float const u_W = tex2D(u_src, stW).x;
   float const u_N = tex2D(u_src, stN).x;
   float const u_E = tex2D(u_src, stE).x;
   float const u_S = tex2D(u_src, stS).x;
   float2 const weights  = tex2D(weights_src, st0).xy;
   float  const weight_W = tex2D(weights_src, stW).x;
   float  const weight_N = tex2D(weights_src, stN).y;
   float  const c        = tex2D(c_src, st0).x;

   float du = c;
#if 1
   du += weight_W * huberDeriv(u - u_W, epsilon.x, epsilon.y);
   du += weight_N * huberDeriv(u - u_N, epsilon.x, epsilon.y);
   du += weights.x * huberDeriv(u - u_E, epsilon.x, epsilon.y);
   du += weights.y * huberDeriv(u - u_S, epsilon.x, epsilon.y);
#else
   du += dot(float4(weights, weight_W, weight_N), huberDeriv(u, float4(u_E, u_S, u_W, u_N), epsilon.x, epsilon.y));
#endif

   u_out = clamp(u - tau*du, 0.0f, 1.0f);
}
