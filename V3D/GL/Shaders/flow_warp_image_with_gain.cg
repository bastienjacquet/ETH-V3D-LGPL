float signum(float x)
{
   return (x < 0) ? -1 : 1;
}

void main(uniform sampler2D uv_src : TEXTURE0, // (u, v)
          uniform sampler2D I0_tex : TEXTURE1, // grayscale
          uniform sampler2D I1_tex : TEXTURE2, // grayscale + Ix + Iy
          float2 st0 : TEXCOORD0,
          float3 st3 : TEXCOORD3, // Holds 1/w, 1/h, 2^level
          out float3 color0_out : COLOR0,
          out float3 color1_out : COLOR1)
{
   float const eps = 0.001f;
   //float const eps = 0.1f;

   float3 uv = tex2D(uv_src, st0).xyz; // (u, v, gain)
   float  I0 = tex2D(I0_tex, st0).x;
   float3 I1 = tex2D(I1_tex, st0 + st3.xy*uv);
   I1.yz *= st3.z;

   // Central differences and use gradients from both images
   float2 const ds0 = float2(1, 0); // I0_tex has nearest texture filtering
   float2 const dt0 = float2(0, 1);
   float2 const ds = float2(0.5, 0);
   float2 const dt = float2(0, 0.5);
   float2 I0grad, I1grad;
   I0grad.x = 0.5f * (tex2D(I0_tex, st0 + st3.xy*ds0).x - tex2D(I0_tex, st0 - st3.xy*ds0).x);
   I0grad.y = 0.5f * (tex2D(I0_tex, st0 + st3.xy*dt0).x - tex2D(I0_tex, st0 - st3.xy*dt0).x);
   I1grad.x = tex2D(I1_tex, st0 + st3.xy*(uv+ds)).x - tex2D(I1_tex, st0 + st3.xy*(uv-ds)).x;
   I1grad.y = tex2D(I1_tex, st0 + st3.xy*(uv+dt)).x - tex2D(I1_tex, st0 + st3.xy*(uv-dt)).x;
   I1.yz = 0.5f * (I0grad + I1grad);

   // Avoid zero gradients
   I1.yz = (abs(I1.yz) < eps) ? (signum(I1.yz) * eps) : I1.yz;

   color0_out.x  = I1.x - dot(float3(I1.yz, -I0.x), uv) - I0.x;
   color0_out.yz = I1.yz;

   color1_out.x = -I0.x;
   color1_out.y = length(I0grad);
   color1_out.z = length(I1grad);
/*    color1_out.y = max(length(I0grad), eps); */
/*    color1_out.z = max(length(I1grad), eps); */
}
